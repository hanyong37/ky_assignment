exit
continue
inv.id
exit
Invoice.create
inv
exit
continue
self.invoices.first.lineitems.count
self.invoices.first.lineitems
self.invoices
self
exit
continue
Lineitme.all
Lineitme
Lineitem
LineItem
Invoice.find_by_id(1).lineitems
Invoice.find_by_id(1)
Lineitem.all
next
item
item.invoice_id
continue
invlist.map{|n| n.lineitems.count}
invlist = self.invoices
self.invoices[1]
self.invoices[1].lineitems.count
self.invoices.count
self.invoices
continue
self.invoices.last.total.to_s
continue
self.invoices.first.total.to_s
self.invoices.last.total.to_s
self.invoices.last.total
self.invoices.first.total
self.invoices.first.lineitem
self.invoices.first
self.invoices[0].lineitems
self.invoices.first.line_items
self.invoices.first.lineitems
self.invoices
self.rent_phases
self
continue
p
invoices
inv
continue
mark_date
continue
inv
exit
inv
n
var local
var
help
watch inv.end_date
continue
p
inv
n
next
inv
continue
p
inv
inv.end_date
next
inv.end_date
continue
p
inv.end_date
inv
next
inv
continue
next
contract.rent_phases
contract
continue
next
contract
name
@name
this
next
@name
@rent_phase
@rent_phases
self
this
continue
help
up
next
step
method
help
next
down
continue
contract.rent_phases
contract
countract
continue
contract.rent_phases.count
contract.rent_phases
contract.rent_phase
next
continue
contract
next
phases
next
help
trial_phase
trial phases
continue
trial_phase
phases
next
phases
continue
con
trial_phase
contract
c
exit
n
contract
continue
contract
cont
continue
phases
exit
phases
new_contract
continue
contract
