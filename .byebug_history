c
self.invoices.count
self.invoices
self
n
step
c
invs.map{|i| i.lineitems}.flatten.size
invs.map{|i| i.lineitems}.flatten
invs.map{|i| i.lineitems.total}
invs.map{|i| i.lineitems.name}
invs.map{|i| i.lineitems.start_date}
invs.map{|i| i.lineitems}
invs.map{|i| i.lineitems.size}
c
invs.map{|x| x[:due_date]}.count
invs.map{|x| x[:due_date]}
invs.map{|x| x.due_date}
invs.map{:due_date}
invs
invs.map{$due_date}
invs.size
c
@new_inv
@new_inv.due_date
c
e
n
@new_inv.due_date
c
@new_inv
c
@monthly_price.to_s 
@monthly_price
c
@monthly_price.to_s
@monthly_price
c
@monthly_price
c
30*12/365
30*12
get_day_price(30)
get_day_price(monthly_price)
n
monthly_price
n
s
n
s
c
test_item.total.class
test_item.total.to_s
n
monthly_price
n
step
365/12
@monthly_price
c
monthly_price
self.total
n
monthly_price
c
up
step
help
down
c
pp test_item
test_item
n
c
test_item.total.to_s
test_item.total
c
phase_1.valid?
c
phase_1.errors
phase_1.valid?
c
phase_1.valid?
phase_1.start_date
c
q
phase_1.errors
phase_1.valid?
c
phase_1.errors
phase_1.valid?
c
n
self.class
self.start_date
pp self
self[0]
self.start_date
self.star_date
self.error
self.errors
self.class
self
n
down
phase_1.start_date.class
phase_1
c
n
bill_list.size
bill_list
c
self.start_date.class
self.start_date
q
self.invoices.where(due_date: "2009-09-09").exists?
self.invoices.where(due_date: "2009-09-09").exist?
self.invoices.where(due_date: "2009-09-09").exists?
self.invoices.where(due_date: "2009-09-09").first
self.invoices.where(due_date: "2009-09-09")
self.invoices.where(due_date: bi[:due_date])
q
c
exit
Lineitem.class
Lineitem
c
n
c
n
up
n
Lineitem.methods.grep(/_by_/)
Lineitem.instance_methods.grep(/_by_/)
exit
Lineitem.instance_methods.grep(/_by_/)
Lineitem.methods.grep(/_by_/)
Lineitem.class_methods.grep(/_by_/)
Lineitem.methods.grep(/_by_/)
Lineitem.instance_methods.grep(/_by_/)
Lineitem.instance_methods - ActiveRecord::Base.instance_methods
 ActiveRecord::Base.instance_methods
Lineitem.new.methods - ActiveRecord::Base.instance_methods
Lineitem.new.methods - ActiveRecord::Base.methods
Lineitem.methods - ActiveRecord::Base.methods
Lineitem.methods
Lineitem.class_eval
Lineitem.class_methods
Lineitem.methods
q
test_inv.lineitems.count
pp test_inv.lineitems.count
pp test_inv.lineitems
c
test_inv.errors
q
y
q
test_inv.errors
pp test_c.errors.messages
q
pp test_c.errors.messages
pp test_c.errors
test_inv.errors
test_inv
q
pp a.errors
a.errors
try a = Invoice.create(contract_id: 1) end
a = Invoice.create(contract_id: 1)
test_inv
q
a = Invoice.create(start_date: "2016-08-09")
test_inv
test_inv.lineitems.length
q
test_inv
test_inv.lineitems.length
test_inv.lineitems.count
test_inv.lineitems
q
c
up
Lineitem.where(invoice_id: 1).sum(total)
Lineitem.where(invoice_id: 1)
Lineitem.all
q
Lineitem.all
n
c
exit
contiue
pp self
self
c
exit
continue
inv.id
exit
Invoice.create
inv
exit
continue
self.invoices.first.lineitems.count
self.invoices.first.lineitems
self.invoices
self
exit
continue
Lineitme.all
Lineitme
Lineitem
LineItem
Invoice.find_by_id(1).lineitems
Invoice.find_by_id(1)
Lineitem.all
next
item
item.invoice_id
continue
invlist.map{|n| n.lineitems.count}
invlist = self.invoices
self.invoices[1]
self.invoices[1].lineitems.count
self.invoices.count
self.invoices
continue
self.invoices.last.total.to_s
continue
self.invoices.first.total.to_s
self.invoices.last.total.to_s
self.invoices.last.total
self.invoices.first.total
self.invoices.first.lineitem
self.invoices.first
self.invoices[0].lineitems
self.invoices.first.line_items
self.invoices.first.lineitems
self.invoices
self.rent_phases
self
continue
p
invoices
inv
continue
mark_date
continue
inv
exit
inv
n
var local
var
help
watch inv.end_date
